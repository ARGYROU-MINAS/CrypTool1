//////////////////////////////////////////////////////////////////////////////////
// Name:      actMode.h
// Product:   cv act library
// Purpose:   enumerations
//
// Copyright: (c) 2006 cv cryptovision GmbH
//            all rights reserved
// Licence:   The conditions for the use of this software are regulated 
//            in the cv act library licence agreement.
//////////////////////////////////////////////////////////////////////////////////

#ifndef ACT_Mode_h
#define ACT_Mode_h

namespace act
{
	enum
	{
		MODE_RANGE_BEGIN = 100,

		ENCRYPT = 100,
		DECRYPT,
		SIGN,
		VERIFY,
		MAC,

		PRIVATE =200,
		PUBLIC,
		SECRET,
		DOMAINPARAMS,
		PKCS8_TYPE,

		CIPHER = 300,
		PADDING,
		DERIVATOR,
		BCMODE,
		KEYSIZE,
		RAWKEY,
		IV,
		BLOCKSIZE,
		CHAINING_VALUE,
		CHAINING_BITCOUNT,
		EFFECTIVE_KEYSIZE,
		SHAREDDATA_1,
		SHAREDDATA_2,
		KEYDATALEN,
		ITERATIONCOUNT,
		COUNTER,
		OUTDATALEN,
		PRNG_MODE,

		ENCODER=400,
		PRIVATEKEY,
		PUBLICKEY,
		PUBLICSIZE,
		KEY,
		SIGNATURE,
		AGREEMENT,

		MODULO=500,
		PRIME_P,
		PRIME_Q,
		MODULOSIZE,
		PRIME_P_SIZE,
		PRIME_Q_SIZE,
		CRT_EXPONENT_1,
		CRT_EXPONENT_2,
		CRT_COEFFICIENT,
		PKCS1_PRIVATEKEY,
		PKCS1_PUBLICKEY,

		CURVE=600,
		PUBLIC_X,
		PUBLIC_Y,
		STATICPUBLIC_X,
		STATICPUBLIC_Y,
		EPHEMERALPUBLIC_X,
		EPHEMERALPUBLIC_Y,
		CURVEPARAM,
		PUBLICKEY_EXPORT_TYPE,
		BASEPOINT_EXPORT_TYPE,
		COMPRESSED,
		UNCOMPRESSED,
		HYBRID,
		IMPLICITLYCA,
		GF2CURVE, 
		PRIMECURVE,
		ENCODE_SIGNATURE,
		PLAIN_SECRET,
	
		RING = 700,
		RINGORDER,
		RINGGENERATOR,
		COFACTOR,
		COMPATIBLE,
		NEWEPHEMERAL,
		CHECKDOMAINPARAMS,

		STATICPRIVATEKEY,
		STATICPUBLICKEY,
		EPHEMERALPRIVATEKEY,
		EPHEMERALPUBLICKEY,

		PIN = 800,
		CARDTYPE,
		CARDPORTTYPE,
		PORTNR,
		DLLNAME,
		READERNAME,
		READERLIST,
		CHANGEMASTERPIN,
		CHANGEPIN,
		USERPIN,
		MASTERPIN,
		PINPAD,
		USERNAME,
		INFOTEXT,
		SIGNKEY,
		ENCKEY,
		SIGNCERTIFICATE,
		ENCCERTIFICATE,
		ROOTCERTIFICATE,
		LOCK_KEY,
		DHKEY,
		DHCERTIFICATE,
		PERSONALIZED,
		AID,
		PATH,
		NULLPIN,
		SELECTKEY,
		ALLCERTIFICATE,
		APPLICATION,
		KEYUSAGE,
		MECHANISM,
		CERTIFICATE,
		DATA,
		KEYTYPE,
		LABEL,
		ID,

		//
		// RFU: 900 - 1100
		// 

		HASH = 1100,
		SALT,
		SALT_LENGTH,
		EMLEN,

		X = 1200,
		SEED,
		MULTIPLIER,

		VERSION = 1300,
		ISSUER,
		SUBJECT,
		SERIALNR,
		ISSUER_DER,
		SUBJECT_DER,
		ISSUER_UID,
		SUBJECT_UID,
		NOTBEFORE_DER,
		NOTAFTER_DER,
		THISUPDATE_DER,
		NEXTUPDATE_DER,
		TBS,

		CVPROFILEID = 1400,
		CVCAREFERENCE,
		CVHOLDERREFERENCE,
		CVHATEMPLATE,
		CVEACTEMPLATE,
		CVEFFECTIVEDATE,
		CVEXPIRATIONDATE,
		CVPUBLICKEY_TLV,
		CVPUBLICKEY_MECHANISM,

		// GF(P)-Curves
		SECGp112r1 = 0x1000,
		SECGp112r2,
		SECGp128r1,
		SECGp128r2,
		SECGp160r1,
		SECGp160r2,
		SECGp160k1,
		ANSIp192r1,
		ANSIp192r2,
		ANSIp192r3,
		NISTp192r1,
		SECGp192r1,
		SECGp192k1,
		NISTp224r1,
		SECGp224r1,
		SECGp224k1,
		ANSIp239r1,
		ANSIp239r2,
		ANSIp239r3,
		ANSIp256r1,
		NISTp256r1,
		SECGp256r1,
		SECGp256k1,
		NISTp384r1,
		NISTp521r1,
		brainpoolP256r1,
		brainpoolP256t1,

		// GF(2^m)-Curves
		SECGz113r1 = 0x1200,
		SECGz113r2,
		SECGz131r1,
		SECGz131r2,
		ANSIz163r1,
		ANSIz163r2,
		ANSIz163r3,
		NISTz163r1,
		NISTz163k1,
		SECGz163r1,
		SECGz163r2,
		SECGz163k1,
		ANSIz176w1,
		ANSIz191r1,
		ANSIz191r2,
		ANSIz191r3,
		SECGz193r1,
		SECGz193r2,
		ANSIz208w1,
		NISTz233r1,
		NISTz233k1,
		SECGz233r1,
		SECGz233k1,
		ANSIz239r1,
		ANSIz239r2,
		ANSIz239r3,
		SECGz239k1,
		ANSIz272w1,
		NISTz283r1,
		NISTz283k1,
		SECGz283r1,
		SECGz283k1,
		ANSIz304w1,
		ANSIz359r1,
		ANSIz368w1,
		NISTz409r1,
		NISTz409k1,
		SECGz409r1,
		SECGz409k1,
		ANSIz431r1,
		NISTz571r1,
		NISTz571k1,
		SECGz571r1,
		SECGz571k1,

		MODE_RANGE_LAST			= 0x1400,

		DEFAULT_RANGE_SIZE		= 0x0010,

		// Subsystem
		SUBSYSTEM_RANGE_BEGIN	= MODE_RANGE_LAST,
		SUBSYSTEM_RANGE_SIZE	= DEFAULT_RANGE_SIZE,
		SUBSYSTEM_RANGE_END		= SUBSYSTEM_RANGE_BEGIN + SUBSYSTEM_RANGE_SIZE,

		// Slot
		SLOT_RANGE_BEGIN		= SUBSYSTEM_RANGE_END,
		SLOT_RANGE_SIZE			= DEFAULT_RANGE_SIZE,
		SLOT_RANGE_NUMBER_SHIFT	= 5,
		SLOT_RANGE_NUMBER		= 1 << SLOT_RANGE_NUMBER_SHIFT,
		SLOT_RANGE_END			= SLOT_RANGE_BEGIN + (SLOT_RANGE_SIZE << SLOT_RANGE_NUMBER_SHIFT),

		// Insert new elements here !

		// TokenConfig begin, open end !
		TOKEN_CONFIG			= 0x2000,
	};

} // namespace act

#endif // ACT_Mode_h
